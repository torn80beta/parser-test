const TelegramBot = require("node-telegram-bot-api");
require("dotenv").config();
const { getProducts } = require("./cheerio.js");
const format = require("date-fns").format;
const mongoose = require("mongoose");
const { addUser, addProduct } = require("./lib/actions");
const {
  createMediaGroup,
  productsListMsg,
  processEndMsg,
  userProductsMsg,
} = require("./lib/bot");
const {
  timeMessage,
  endProcessMessage,
  startProcessMessage,
  searchMessageHandler,
  urlHandler,
} = require("./helpers");
const User = require("./lib/models/user.js");
const Product = require("./lib/models/product.js");

const { DB_KEY } = process.env;

mongoose.set("strictQuery", true);

mongoose
  .connect(DB_KEY)
  .then(() => {
    console.log("Connection to database has been established");
  })
  .catch((error) => {
    console.log(error.message);
    process.exit(1);
  });

const token = process.env.BOT_API_TOKEN;

const bot = new TelegramBot(token, { polling: true });

bot.on("callback_query", async (msg) => {
  /* GET USER'S PRODUCT LIST */

  if (msg.data === "mylist") {
    const telegramUserId = msg.from.id;
    const user = await User.findOne({ telegramUserId });

    if (!user) {
      await bot.sendMessage(
        telegramUserId,
        "ü§ñ –í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä—ñ–≤ —É —Å–≤—ñ–π —Å–ø–∏—Å–æ–∫. –Ø–∫—â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞—î—Ç–µ—Å—å –æ–ø—Ü—ñ—î—é '–°–ø–∏—Å–æ–∫ –∞–∫—Ü—ñ–π' –∞–±–æ '–§–æ—Ç–æ –∞–∫—Ü—ñ–π' –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ç–æ–≤–∞—Ä–∏ —ñ–∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É —â–æ–± –≤–∏ –º–æ–≥–ª–∏ –ø–æ–±–∞—á–∏—Ç–∏ —è–∫ –ø—Ä–∞—Ü—é—î –±–æ—Ç."
      );
      return;
    }

    const products = await Product.find({ owner: user._id }).sort({
      title: "asc",
    });

    if (products.length === 0) {
      await bot.sendMessage(msg.from.id, "ü§ñ –£ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.");

      return;
    }

    await bot.sendMessage(
      msg.from.id,
      `ü§ñ –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–æ–≤–∞—Ä—ñ–≤ —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É: <b>${products.length}</b>.`,
      {
        parse_mode: "HTML",
        disable_web_page_preview: true,
      }
    );

    const messageParts = Math.ceil(products.length / 20);

    for (let i = 0; i < messageParts; i++) {
      const start = i * 2 * 10;
      const end = start + 20;
      const partialList = products.slice(start, end);

      await bot.sendMessage(msg.from.id, userProductsMsg(partialList, start), {
        parse_mode: "HTML",
        disable_web_page_preview: true,
      });
    }
  }

  /* SEARCH PRODUCTS WITH PHOTO */

  if (msg.data === "photo") {
    const userFavoriteProducts = await searchMessageHandler({
      bot,
      msg,
      Product,
      User,
    });

    if (!userFavoriteProducts) return;

    setTimeout(async () => {
      const startDate = new Date();

      startProcessMessage({ startDate, msg, searchBy: "photo" });

      const fetchedProducts = await getProducts(userFavoriteProducts);

      const actionProducts = fetchedProducts.filter(
        (prod) => prod.value.action
      );

      const time = timeMessage(startDate);

      await bot.sendMessage(
        msg.from.id,
        processEndMsg({ actionProducts, time, userFavoriteProducts }),
        { parse_mode: "HTML", disable_web_page_preview: true }
      );

      const messageParts = Math.ceil(actionProducts.length / 10);

      for (let i = 0; i < messageParts; i++) {
        const start = i * 10;
        const end = start + 10;
        const partialList = actionProducts.slice(start, end);

        const mediaGroup = await createMediaGroup(partialList);

        await bot.sendMediaGroup(msg.from.id, (media = mediaGroup));
      }

      endProcessMessage({
        startDate,
        userFavoriteProducts,
        actionProducts,
        msg,
      });
    }, 0);
  }

  /* SEARCH PRODUCTS WITH LIST */

  if (msg.data === "list") {
    const userFavoriteProducts = await searchMessageHandler({
      bot,
      msg,
      Product,
      User,
    });

    if (!userFavoriteProducts) return;

    setTimeout(async () => {
      const startDate = new Date();

      startProcessMessage({ startDate, msg, searchBy: "list" });

      const fetchedProducts = await getProducts(userFavoriteProducts);

      const actionProducts = fetchedProducts.filter(
        (prod) => prod.value.action
      );

      const time = timeMessage(startDate);

      await bot.sendMessage(
        msg.from.id,
        processEndMsg({
          actionProducts,
          time,
          userFavoriteProducts,
        }),
        { parse_mode: "HTML", disable_web_page_preview: true }
      );

      const messageParts = Math.ceil(actionProducts.length / 10);

      for (let i = 0; i < messageParts; i++) {
        const start = i * 10;
        const end = start + 10;
        const partialList = actionProducts.slice(start, end);

        const message = productsListMsg(partialList);

        await bot.sendMessage(msg.from.id, message, {
          parse_mode: "HTML",
          disable_web_page_preview: true,
        });
      }

      endProcessMessage({
        startDate,
        userFavoriteProducts,
        actionProducts,
        msg,
      });
    }, 0);
  }

  /* ADD PRODUCT */

  if (msg.data === "add") {
    const name = msg.from.first_name;
    const telegramUserId = msg.from.id;

    await addUser({ name, telegramUserId });

    const productPrompt = await bot.sendMessage(
      msg.from.id,
      'ü§ñ –©–æ–± –¥–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä –¥–æ –≤–∞—à–æ–≥–æ —Å–ø–∏—Å–∫—É, –∑–Ω–∞–π–¥—ñ—Ç—å –π–æ–≥–æ <a href="https://www.atbmarket.com/">–Ω–∞ —Å–∞–π—Ç—ñ –ê–¢–ë</a> , —Å–∫–æ–ø—ñ—é–π—Ç–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑ –∞–¥—Ä–µ—Å–Ω–æ–≥–æ —Ä—è–¥–∫–∞ —ñ –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –π–æ–≥–æ —É –≤—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. ',
      {
        reply_markup: {
          force_reply: true,
        },
        parse_mode: "HTML",
      }
    );

    await bot.onReplyToMessage(
      msg.from.id,
      productPrompt.message_id,
      async (nameMsg) => {
        console.log(
          `${format(new Date(), "HH:mm:ss")} User${
            msg.from.first_name
          } trying to add product: ${nameMsg.text}`
        );

        const url = await urlHandler(nameMsg.text);
        const product = await addProduct({ url, telegramUserId });

        if (!url || product.status !== 201) {
          await bot.sendMessage(
            msg.from.id,
            `‚ùå –ü–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–µ –≤–∞–ª—ñ–¥–Ω–µ! –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.`
          );
          return;
        }

        const mediaGroup = await createMediaGroup([{ value: product.value }]);

        await bot.sendMessage(msg.from.id, `‚úÖ –í–∏ –¥–æ–¥–∞–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–æ–≤–∞—Ä:`);
        await bot.sendMediaGroup(msg.from.id, (media = mediaGroup));

        console.log(
          `${format(new Date(), "HH:mm:ss")} Product added to ${
            msg.from.first_name
          } user's list`
        );
      }
    );
  }

  /* DELETE PRODUCT */

  if (msg.data === "delete") {
    const user = await User.findOne({ telegramUserId: msg.from.id });

    if (!user) {
      bot.sendMessage(msg.from.id, "ü§ñ –£ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤.");
      return;
    }

    const prompt = await bot.sendMessage(
      msg.from.id,
      "ü§ñ –í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Ç–æ–≤–∞—Ä—É —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏: ",
      {
        reply_markup: {
          force_reply: true,
        },
      }
    );

    await bot.onReplyToMessage(msg.from.id, prompt.message_id, async (msg) => {
      const productToUpdate = await Product.findOne({
        productCode: msg.text,
      });

      if (!productToUpdate) {
        await bot.sendMessage(
          msg.from.id,
          "‚ùå –¢–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∫–æ–¥ —ñ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ü—å–æ–≥–æ —Ç–æ–≤–∞—Ä—É —É –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É —ñ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
        );
        return;
      }

      await productToUpdate.owner.pull({
        _id: user._id,
      });
      await productToUpdate.save();

      if (productToUpdate.owner.length === 0) {
        await Product.deleteOne({ _id: productToUpdate._id });
      }

      await bot.sendMessage(msg.from.id, `‚úÖ –¢–æ–≤–∞—Ä —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ.`);
    });
  }
});

bot.onText(/\/start/, (msg) => {
  const welcomeMessage = "–í—ñ—Ç–∞—é, " + msg.from.first_name + "! üëã";

  bot.sendMessage(msg.chat.id, welcomeMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìù  –ú—ñ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤", callback_data: "mylist" }],
        [
          {
            text: "‚úÖ  –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä",
            callback_data: "add",
          },
          {
            text: "‚ùå  –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä",
            callback_data: "delete",
          },
        ],
        [
          {
            text: "üõí –§–æ—Ç–æ –∞–∫—Ü—ñ–π",
            callback_data: "photo",
          },
          {
            text: "üõí –°–ø–∏—Å–æ–∫ –∞–∫—Ü—ñ–π",
            callback_data: "list",
          },
        ],
      ],
    },
  });
});
