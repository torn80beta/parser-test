const TelegramBot = require("node-telegram-bot-api");
require("dotenv").config();
// const parser = require("./parser.js");
// const getProducts = require("./pw.js");
const { getProducts, addProduct } = require("./cheerio.js");
const format = require("date-fns").format;
const mongoose = require("mongoose");
const addUser = require("./lib/actions/addUser.js");

const data = require("./data.js");

const { DB_KEY } = process.env;

mongoose.set("strictQuery", true);

mongoose
  .connect(DB_KEY)
  .then(() => {
    console.log("Connection to database has been established");
  })
  .catch((error) => {
    console.log(error.message);
    process.exit(1);
  });

const token = process.env.BOT_API_TOKEN;

const bot = new TelegramBot(token, { polling: true });

bot.on("callback_query", async (msg) => {
  // console.log(msg);
  if (msg.data === "mylist") {
    const isRegistered = data.filter((user) => user.userId === msg.from.id);
    if (isRegistered.length === 0) {
      bot.sendMessage(
        msg.from.id,
        "–í–∏ —â–µ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä—ñ–≤ —É —Å–≤—ñ–π —Å–ø–∏—Å–æ–∫. –Ø–∫—â–æ —Å–∫–æ—Ä–∏—Å—Ç–∞—î—Ç–µ—Å—å –æ–ø—Ü—ñ—î—é '–°–ø–∏—Å–æ–∫ –∞–∫—Ü—ñ–π' –∞–±–æ '–§–æ—Ç–æ –∞–∫—Ü—ñ–π' –≤–∏ –æ—Ç—Ä–∏–º–∞—î—Ç–µ —Ç–æ–≤–∞—Ä–∏ —ñ–∑ –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫—É —â–æ–± –≤–∏ –º–æ–≥–ª–∏ –ø–æ–±–∞—á–∏—Ç–∏ —è–∫ –ø—Ä–∞—Ü—é—î –±–æ—Ç."
      );
      return;
    }

    bot.sendMessage(msg.from.id, "ü§ñ –¶—è –æ–ø—Ü—ñ—è –Ω–∞—Ä–∞–∑—ñ —É —Ä–æ–∑—Ä–æ–±—Ü—ñ");
  }

  if (msg.data === "photo") {
    let user = data.find((user) => user.userId === msg.from.id);

    if (!user) {
      bot.sendMessage(
        msg.from.id,
        "ü§ñ –í–∏ —â–µ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–æ —Å–≤–æ–≥–æ —Å–ø–∏—Å–∫—É, —Ç–æ–º—É –≤–∞–º –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è..."
      );
      user = data[0];
    }

    if (user.products.length === 0) {
      bot.sendMessage(msg.from.id, "‚ùå –£ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤");
      return;
    }

    bot.sendMessage(
      msg.from.id,
      "ü§ñüîé –ü–æ—à—É–∫ –∞–∫—Ü—ñ–π–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ —Å–ø–∏—Å–∫–æ–º, –æ—á–∏–∫—É–π—Ç–µ..."
    );

    const startDate = new Date();

    console.log(
      `${format(startDate, "HH:mm:ss")} User ${
        msg.from.first_name
      } looking for products by photo...`
    );

    const userFavoriteProducts = user.products;

    setTimeout(async () => {
      const res = await getProducts(userFavoriteProducts);
      // console.log(res);

      const actionProducts = res.filter((prod) => prod.value.action);

      const mediaGroup = await actionProducts.map((prod) => {
        const {
          image,
          title,
          regularPrice,
          actionPrice,
          atbCardPrice,
          url,
          productCode,
        } = prod.value;
        return {
          type: "photo",
          media: image,
          caption: `‚úÖ <b>${title}</b> \nüí≤ –ó–≤–∏—á–∞–π–Ω–∞ —Ü—ñ–Ω–∞: ${regularPrice} –≥—Ä–Ω \n‚ùóÔ∏è –ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞: ${actionPrice} –≥—Ä–Ω \n${
            atbCardPrice !== "null"
              ? "‚≠êÔ∏è –¶—ñ–Ω–∞ –∑ –∫–∞—Ä—Ç–∫–æ—é –ê–¢–ë: " + atbCardPrice + " –≥—Ä–Ω ‚≠êÔ∏è \n"
              : ""
          }ü™™ –ö–æ–¥ —Ç–æ–≤–∞—Ä—É: ${productCode} \nüõí ${url}`,
          parse_mode: "HTML",
        };
      });

      const endDate = new Date();

      const diffTime = Math.abs(endDate - startDate);
      const isMinute =
        format(diffTime, "mm") === "00"
          ? ""
          : `<b>${format(diffTime, "mm")}<b> —Ö–≤–∏–ª–∏–Ω. : `;

      const calculateTimeMessage = `${
        isMinute + "<b>" + format(diffTime, "ss") + "</b>" + " —Å–µ–∫—É–Ω–¥"
      }`;

      await bot.sendMessage(
        msg.from.id,
        `${
          actionProducts.length > 0
            ? `–ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${calculateTimeMessage}. \n–û–±—Ä–æ–±–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: <b>${userFavoriteProducts.length}</b>. –ó–Ω–∞–π–¥–µ–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∞–∫—Ü—ñ–π–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó: \n \n `
            : "–ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–∫—Ü—ñ–π–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –≤–∞—à–∏–º —Å–ø–∏—Å–∫–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è"
        }`,
        { parse_mode: "HTML", disable_web_page_preview: true }
      );

      bot.sendMediaGroup(msg.from.id, (media = mediaGroup));
      console.log(
        `Process completed for user ${msg.from.first_name} in ${format(
          diffTime,
          "mm:ss"
        )}, ${userFavoriteProducts.length} were processed. ${
          actionProducts.length
        } products found.`
      );
    }, 0);
  }

  if (msg.data === "list") {
    let user = data.find((user) => user.userId === msg.from.id);

    if (!user) {
      bot.sendMessage(
        msg.from.id,
        "ü§ñ –í–∏ —â–µ –Ω—ñ–∫–æ–ª–∏ –Ω–µ –¥–æ–¥–∞–≤–∞–ª–∏ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–æ —Å–≤–æ–≥–æ —Å–ø–∏—Å–∫—É, —Ç–æ–º—É –≤–∞–º –±—É–¥—É—Ç—å –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω—ñ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Ç–æ–≤–∞—Ä–∏ –¥–ª—è –æ–∑–Ω–∞–π–æ–º–ª–µ–Ω–Ω—è..."
      );
      user = data[0];
    }

    if (user.products.length === 0) {
      bot.sendMessage(msg.from.id, "‚ùå –£ –≤–∞—à–æ–º—É —Å–ø–∏—Å–∫—É –Ω–µ–º–∞—î —Ç–æ–≤–∞—Ä—ñ–≤");
      return;
    }

    bot.sendMessage(
      msg.from.id,
      "ü§ñüîé –ü–æ—à—É–∫ –∞–∫—Ü—ñ–π–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ —Å–ø–∏—Å–∫–æ–º, –æ—á–∏–∫—É–π—Ç–µ..."
    );

    const startDate = new Date();

    console.log(
      `${format(startDate, "HH:mm:ss")} User ${
        msg.from.first_name
      } looking for products by list...`
    );

    const userFavoriteProducts = user.products;

    setTimeout(async () => {
      const res = await getProducts(userFavoriteProducts);
      // console.log(res);

      const actionProducts = res.filter((prod) => prod.value.action);

      const message = actionProducts
        .map((prod) => {
          const {
            title,
            regularPrice,
            actionPrice,
            atbCardPrice,
            url,
            productCode,
          } = prod.value;

          return `‚úÖ <b>${title}</b> \nüí≤ –ó–≤–∏—á–∞–π–Ω–∞ —Ü—ñ–Ω–∞: ${regularPrice} –≥—Ä–Ω \n‚ùóÔ∏è –ê–∫—Ü—ñ–π–Ω–∞ —Ü—ñ–Ω–∞: ${actionPrice} –≥—Ä–Ω \n${
            atbCardPrice !== "null"
              ? "‚≠êÔ∏è –¶—ñ–Ω–∞ –∑ –∫–∞—Ä—Ç–∫–æ—é –ê–¢–ë: " + atbCardPrice + " –≥—Ä–Ω ‚≠êÔ∏è \n"
              : ""
          }ü™™ –ö–æ–¥ —Ç–æ–≤–∞—Ä—É: ${productCode} \nüõí ${url}`;
        })
        .join("\n \n");

      const endDate = new Date();

      const diffTime = Math.abs(endDate - startDate);

      const isMinute =
        format(diffTime, "mm") === "00"
          ? ""
          : `<b>${format(diffTime, "mm")}<b> —Ö–≤–∏–ª–∏–Ω. : `;

      const calculateTimeMessage = `${
        isMinute + "<b>" + format(diffTime, "ss") + "</b>" + " —Å–µ–∫—É–Ω–¥"
      }`;

      await bot.sendMessage(
        msg.from.id,
        `${
          actionProducts.length > 0
            ? `–ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞ ${calculateTimeMessage}. \n–û–±—Ä–æ–±–ª–µ–Ω–æ —Ç–æ–≤–∞—Ä—ñ–≤: <b>${userFavoriteProducts.length}</b>. –ó–Ω–∞–π–¥–µ–Ω—ñ –Ω–∞—Å—Ç—É–ø–Ω—ñ –∞–∫—Ü—ñ–π–Ω—ñ –ø—Ä–æ–ø–æ–∑–∏—Ü—ñ—ó: \n \n ` +
              message
            : "–ü–æ—à—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–∫—Ü—ñ–π–Ω–∏—Ö —Ç–æ–≤–∞—Ä—ñ–≤ –∑–∞ –≤–∞—à–∏–º —Å–ø–∏—Å–∫–æ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ ü§∑‚Äç‚ôÇÔ∏è"
        }`,
        { parse_mode: "HTML", disable_web_page_preview: true }
      );

      console.log(
        `Process completed for user ${msg.from.first_name} in ${format(
          diffTime,
          "mm:ss"
        )}, ${userFavoriteProducts.length} were processed. ${
          actionProducts.length
        } products found.`
      );
    }, 0);
  }

  if (msg.data === "add") {
    // bot.sendMessage(msg.from.id, "ü§ñ –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞—Ä–∞–∑—ñ —É —Ä–æ–∑—Ä–æ–±—Ü—ñ");
    // console.log(msg.from);

    const name = msg.from.first_name;
    const telegramUserId = msg.from.id;

    const user = await addUser({ name, telegramUserId });
    console.log(user);
    // if (user.status === 409) {
    //   await bot.sendMessage(msg.from.id, "ü§ñ –í–∏ –≤–∂–µ –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω—ñ");
    // }

    const productPrompt = await bot.sendMessage(
      msg.from.id,
      "–í–≤–µ–¥—ñ—Ç—å –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ —Ç–æ–≤–∞—Ä —è–∫–∏–π –≤–∏ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏: ",
      {
        reply_markup: {
          force_reply: true,
        },
      }
    );

    bot.onReplyToMessage(
      msg.from.id,
      productPrompt.message_id,
      async (nameMsg) => {
        const url = nameMsg.text;
        console.log(nameMsg);
        // save name in DB if you want to ...
        await bot.sendMessage(
          msg.from.id,
          `–í–∏ –¥–æ–¥–∞–ª–∏ –Ω–∞—Å—Ç—É–ø–Ω–∏–π —Ç–æ–≤–∞—Ä: ${url}!`
        );
      }
    );
  }

  if (msg.data === "delete") {
    console.log(msg.from);
    bot.sendMessage(msg.from.id, "ü§ñ –¶—è —Ñ—É–Ω–∫—Ü—ñ—è –Ω–∞—Ä–∞–∑—ñ —É —Ä–æ–∑—Ä–æ–±—Ü—ñ");
  }
});

bot.onText(/\/start/, (msg) => {
  // console.log(msg);
  const welcomeMessage = "–í—ñ—Ç–∞—é, " + msg.from.first_name + "! üëã";

  bot.sendMessage(msg.chat.id, welcomeMessage, {
    reply_markup: {
      inline_keyboard: [
        [{ text: "üìù  –ú—ñ–π —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤", callback_data: "mylist" }],
        [
          {
            text: "‚úÖ  –î–æ–¥–∞—Ç–∏ —Ç–æ–≤–∞—Ä",
            callback_data: "add",
          },
          {
            text: "‚ùå  –í–∏–¥–∞–ª–∏—Ç–∏ —Ç–æ–≤–∞—Ä",
            callback_data: "delete",
          },
        ],
        [
          {
            text: "üõí –§–æ—Ç–æ –∞–∫—Ü—ñ–π",
            callback_data: "photo",
          },
          {
            text: "üõí –°–ø–∏—Å–æ–∫ –∞–∫—Ü—ñ–π",
            callback_data: "list",
          },
        ],
      ],
    },
  });
});

/* Media model to send via sendMediaGroup */
// (media = [
//   {
//     type: "photo",
//     media:
//       "https://media.cnn.com/api/v1/images/stellar/prod/230719152236-04-how-to-stop-the-next-cuban-missile-crisis.jpg?c=16x9&q=h_720,w_1280,c_fill/f_webp",
//     thumbnail:
//       "https://www.atbmarket.com/product/sir-kislomolocnij-350-g-ukrainskij-nezirnij-pet",
//     caption: "test1",
//   },
//   {
//     type: "photo",
//     media:
//       "https://media.cnn.com/api/v1/images/stellar/prod/230719152208-03-how-to-stop-the-next-cuban-missile-crisis.jpg?c=16x9&q=h_720,w_1280,c_fill/f_webp",
//     thumbnail: "",
//     caption: "test2",
//     parse_mode: "HTML",
//     // has_spoiler: true,
//   },
// ])
